// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MitionPoint_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MitionStatus_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginPoint_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotDrive_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotInfo_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotMap_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotPos_robot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotTrail_robot_2eproto;
class RobotDriveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotDrive> _instance;
} _RobotDrive_default_instance_;
class MitionPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MitionPoint> _instance;
} _MitionPoint_default_instance_;
class OriginPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OriginPoint> _instance;
} _OriginPoint_default_instance_;
class RobotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotRequest> _instance;
} _RobotRequest_default_instance_;
class RobotMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMap> _instance;
} _RobotMap_default_instance_;
class RobotPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotPos> _instance;
} _RobotPos_default_instance_;
class RobotTrailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotTrail> _instance;
} _RobotTrail_default_instance_;
class RobotInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotInfo> _instance;
} _RobotInfo_default_instance_;
class MitionStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MitionStatus> _instance;
} _MitionStatus_default_instance_;
class RobotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotResponse> _instance;
} _RobotResponse_default_instance_;
static void InitDefaultsscc_info_MitionPoint_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MitionPoint_default_instance_;
    new (ptr) ::MitionPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MitionPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MitionPoint_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MitionPoint_robot_2eproto}, {}};

static void InitDefaultsscc_info_MitionStatus_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MitionStatus_default_instance_;
    new (ptr) ::MitionStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MitionStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MitionStatus_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MitionStatus_robot_2eproto}, {}};

static void InitDefaultsscc_info_OriginPoint_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OriginPoint_default_instance_;
    new (ptr) ::OriginPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OriginPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OriginPoint_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OriginPoint_robot_2eproto}, {}};

static void InitDefaultsscc_info_RobotDrive_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotDrive_default_instance_;
    new (ptr) ::RobotDrive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotDrive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotDrive_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotDrive_robot_2eproto}, {}};

static void InitDefaultsscc_info_RobotInfo_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotInfo_default_instance_;
    new (ptr) ::RobotInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotInfo_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotInfo_robot_2eproto}, {}};

static void InitDefaultsscc_info_RobotMap_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotMap_default_instance_;
    new (ptr) ::RobotMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotMap_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotMap_robot_2eproto}, {}};

static void InitDefaultsscc_info_RobotPos_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotPos_default_instance_;
    new (ptr) ::RobotPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotPos_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RobotPos_robot_2eproto}, {}};

static void InitDefaultsscc_info_RobotRequest_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotRequest_default_instance_;
    new (ptr) ::RobotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotRequest_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RobotRequest_robot_2eproto}, {
      &scc_info_RobotDrive_robot_2eproto.base,
      &scc_info_MitionPoint_robot_2eproto.base,
      &scc_info_OriginPoint_robot_2eproto.base,}};

static void InitDefaultsscc_info_RobotResponse_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotResponse_default_instance_;
    new (ptr) ::RobotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_RobotResponse_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_RobotResponse_robot_2eproto}, {
      &scc_info_RobotPos_robot_2eproto.base,
      &scc_info_RobotMap_robot_2eproto.base,
      &scc_info_RobotTrail_robot_2eproto.base,
      &scc_info_MitionPoint_robot_2eproto.base,
      &scc_info_RobotInfo_robot_2eproto.base,
      &scc_info_MitionStatus_robot_2eproto.base,}};

static void InitDefaultsscc_info_RobotTrail_robot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotTrail_default_instance_;
    new (ptr) ::RobotTrail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotTrail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotTrail_robot_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotTrail_robot_2eproto}, {
      &scc_info_RobotPos_robot_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RobotDrive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotDrive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotDrive, mode_),
  PROTOBUF_FIELD_OFFSET(::RobotDrive, speed_),
  PROTOBUF_FIELD_OFFSET(::RobotDrive, angle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::MitionPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MitionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MitionPoint, x_),
  PROTOBUF_FIELD_OFFSET(::MitionPoint, y_),
  PROTOBUF_FIELD_OFFSET(::MitionPoint, attribute_),
  PROTOBUF_FIELD_OFFSET(::MitionPoint, m_speed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::OriginPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::OriginPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OriginPoint, x_),
  PROTOBUF_FIELD_OFFSET(::OriginPoint, y_),
  PROTOBUF_FIELD_OFFSET(::OriginPoint, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::RobotRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotRequest, token_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, wants_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, action_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, drive_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, point_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, origin_),
  PROTOBUF_FIELD_OFFSET(::RobotRequest, confirm_),
  0,
  3,
  4,
  1,
  ~0u,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::RobotMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotMap, origin_x_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, origin_y_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, size_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, grids_x_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, grids_y_),
  PROTOBUF_FIELD_OFFSET(::RobotMap, zgrids_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::RobotPos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotPos, offset_x_),
  PROTOBUF_FIELD_OFFSET(::RobotPos, offset_y_),
  PROTOBUF_FIELD_OFFSET(::RobotPos, angle_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RobotTrail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotTrail, trail_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, voltage_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, cur_x_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, cur_y_),
  PROTOBUF_FIELD_OFFSET(::RobotInfo, cur_yaw_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::MitionStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MitionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MitionStatus, mition_number_),
  PROTOBUF_FIELD_OFFSET(::MitionStatus, mition_finish_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::RobotResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RobotResponse, code_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, info_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, pos_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, map_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, trail_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, point_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, status_),
  PROTOBUF_FIELD_OFFSET(::RobotResponse, mition_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::RobotDrive)},
  { 11, 20, sizeof(::MitionPoint)},
  { 24, 32, sizeof(::OriginPoint)},
  { 35, 47, sizeof(::RobotRequest)},
  { 54, 65, sizeof(::RobotMap)},
  { 71, 79, sizeof(::RobotPos)},
  { 82, -1, sizeof(::RobotTrail)},
  { 88, 98, sizeof(::RobotInfo)},
  { 103, 110, sizeof(::MitionStatus)},
  { 112, 125, sizeof(::RobotResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotDrive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MitionPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OriginPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotTrail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MitionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RobotResponse_default_instance_),
};

const char descriptor_table_protodef_robot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013robot.proto\"|\n\nRobotDrive\022\036\n\004mode\030\001 \002("
  "\0162\020.RobotDrive.Mode\022\r\n\005speed\030\002 \001(\002\022\r\n\005an"
  "gle\030\003 \001(\002\"0\n\004Mode\022\010\n\004FREE\020\000\022\t\n\005PAUSE\020\001\022\010"
  "\n\004STOP\020\002\022\t\n\005DRIVE\020\003\"G\n\013MitionPoint\022\t\n\001x\030"
  "\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\021\n\tattribute\030\003 \002(\005\022\017\n\007m"
  "_speed\030\004 \002(\002\".\n\013OriginPoint\022\t\n\001x\030\001 \002(\002\022\t"
  "\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\271\002\n\014RobotRequest\022\r\n"
  "\005token\030\001 \002(\014\022\r\n\005wants\030\002 \002(\005\022\016\n\006action\030\003 "
  "\002(\005\022\032\n\005drive\030\004 \001(\0132\013.RobotDrive\022\033\n\005point"
  "\030\005 \003(\0132\014.MitionPoint\022\034\n\006origin\030\006 \001(\0132\014.O"
  "riginPoint\022\017\n\007confirm\030\007 \001(\005\".\n\005Wants\022\010\n\004"
  "NONE\020\000\022\007\n\003POS\020\001\022\007\n\003MAP\020\002\022\t\n\005TRAIL\020\004\"c\n\006A"
  "ction\022\010\n\004NOOP\020\000\022\017\n\013POINT_APPLY\020\001\022\016\n\nNAVI"
  "GATION\020\002\022\017\n\013INIT_ORIGIN\020\003\022\r\n\tCREAT_MAP\020\004"
  "\022\016\n\nFINISH_MAP\020\005\"\247\001\n\010RobotMap\022\020\n\010origin_"
  "x\030\001 \002(\001\022\020\n\010origin_y\030\002 \002(\001\022\014\n\004size\030\003 \002(\005\022"
  "\017\n\007grids_x\030\004 \002(\005\022\017\n\007grids_y\030\005 \002(\005\022\016\n\006zgr"
  "ids\030\006 \002(\014\"7\n\004Grid\022\n\n\006UNKOWN\020\000\022\010\n\004FREE\020\001\022"
  "\014\n\010OCCUPIED\020\002\022\013\n\007FEATURE\020\003\"=\n\010RobotPos\022\020"
  "\n\010offset_x\030\001 \002(\002\022\020\n\010offset_y\030\002 \002(\002\022\r\n\005an"
  "gle\030\003 \001(\002\"&\n\nRobotTrail\022\030\n\005trail\030\001 \003(\0132\t"
  ".RobotPos\"Z\n\tRobotInfo\022\r\n\005speed\030\001 \002(\002\022\017\n"
  "\007voltage\030\002 \002(\002\022\r\n\005cur_x\030\003 \002(\002\022\r\n\005cur_y\030\004"
  " \002(\002\022\017\n\007cur_yaw\030\005 \002(\002\"<\n\014MitionStatus\022\025\n"
  "\rmition_number\030\001 \002(\005\022\025\n\rmition_finish\030\002 "
  "\002(\010\"\317\001\n\rRobotResponse\022\014\n\004code\030\001 \002(\005\022\014\n\004i"
  "nfo\030\002 \001(\t\022\026\n\003pos\030\003 \001(\0132\t.RobotPos\022\026\n\003map"
  "\030\004 \001(\0132\t.RobotMap\022\032\n\005trail\030\005 \001(\0132\013.Robot"
  "Trail\022\033\n\005point\030\006 \001(\0132\014.MitionPoint\022\032\n\006st"
  "atus\030\007 \001(\0132\n.RobotInfo\022\035\n\006mition\030\010 \001(\0132\r"
  ".MitionStatus"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_robot_2eproto_sccs[10] = {
  &scc_info_MitionPoint_robot_2eproto.base,
  &scc_info_MitionStatus_robot_2eproto.base,
  &scc_info_OriginPoint_robot_2eproto.base,
  &scc_info_RobotDrive_robot_2eproto.base,
  &scc_info_RobotInfo_robot_2eproto.base,
  &scc_info_RobotMap_robot_2eproto.base,
  &scc_info_RobotPos_robot_2eproto.base,
  &scc_info_RobotRequest_robot_2eproto.base,
  &scc_info_RobotResponse_robot_2eproto.base,
  &scc_info_RobotTrail_robot_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2eproto = {
  false, false, descriptor_table_protodef_robot_2eproto, "robot.proto", 1213,
  &descriptor_table_robot_2eproto_once, descriptor_table_robot_2eproto_sccs, descriptor_table_robot_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_robot_2eproto::offsets,
  file_level_metadata_robot_2eproto, 10, file_level_enum_descriptors_robot_2eproto, file_level_service_descriptors_robot_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_robot_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_robot_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotDrive_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2eproto);
  return file_level_enum_descriptors_robot_2eproto[0];
}
bool RobotDrive_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotDrive_Mode RobotDrive::FREE;
constexpr RobotDrive_Mode RobotDrive::PAUSE;
constexpr RobotDrive_Mode RobotDrive::STOP;
constexpr RobotDrive_Mode RobotDrive::DRIVE;
constexpr RobotDrive_Mode RobotDrive::Mode_MIN;
constexpr RobotDrive_Mode RobotDrive::Mode_MAX;
constexpr int RobotDrive::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotRequest_Wants_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2eproto);
  return file_level_enum_descriptors_robot_2eproto[1];
}
bool RobotRequest_Wants_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotRequest_Wants RobotRequest::NONE;
constexpr RobotRequest_Wants RobotRequest::POS;
constexpr RobotRequest_Wants RobotRequest::MAP;
constexpr RobotRequest_Wants RobotRequest::TRAIL;
constexpr RobotRequest_Wants RobotRequest::Wants_MIN;
constexpr RobotRequest_Wants RobotRequest::Wants_MAX;
constexpr int RobotRequest::Wants_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2eproto);
  return file_level_enum_descriptors_robot_2eproto[2];
}
bool RobotRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotRequest_Action RobotRequest::NOOP;
constexpr RobotRequest_Action RobotRequest::POINT_APPLY;
constexpr RobotRequest_Action RobotRequest::NAVIGATION;
constexpr RobotRequest_Action RobotRequest::INIT_ORIGIN;
constexpr RobotRequest_Action RobotRequest::CREAT_MAP;
constexpr RobotRequest_Action RobotRequest::FINISH_MAP;
constexpr RobotRequest_Action RobotRequest::Action_MIN;
constexpr RobotRequest_Action RobotRequest::Action_MAX;
constexpr int RobotRequest::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotMap_Grid_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2eproto);
  return file_level_enum_descriptors_robot_2eproto[3];
}
bool RobotMap_Grid_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotMap_Grid RobotMap::UNKOWN;
constexpr RobotMap_Grid RobotMap::FREE;
constexpr RobotMap_Grid RobotMap::OCCUPIED;
constexpr RobotMap_Grid RobotMap::FEATURE;
constexpr RobotMap_Grid RobotMap::Grid_MIN;
constexpr RobotMap_Grid RobotMap::Grid_MAX;
constexpr int RobotMap::Grid_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RobotDrive::InitAsDefaultInstance() {
}
class RobotDrive::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotDrive>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RobotDrive::RobotDrive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotDrive)
}
RobotDrive::RobotDrive(const RobotDrive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:RobotDrive)
}

void RobotDrive::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(angle_));
}

RobotDrive::~RobotDrive() {
  // @@protoc_insertion_point(destructor:RobotDrive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotDrive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotDrive::ArenaDtor(void* object) {
  RobotDrive* _this = reinterpret_cast< RobotDrive* >(object);
  (void)_this;
}
void RobotDrive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotDrive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotDrive& RobotDrive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotDrive_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotDrive::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotDrive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotDrive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .RobotDrive.Mode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::RobotDrive_Mode_IsValid(val))) {
            _internal_set_mode(static_cast<::RobotDrive_Mode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotDrive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotDrive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotDrive.Mode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // optional float speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_speed(), target);
  }

  // optional float angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotDrive)
  return target;
}

size_t RobotDrive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotDrive)
  size_t total_size = 0;

  // required .RobotDrive.Mode mode = 1;
  if (_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional float speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float angle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotDrive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotDrive)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotDrive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotDrive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotDrive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotDrive)
    MergeFrom(*source);
  }
}

void RobotDrive::MergeFrom(const RobotDrive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotDrive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotDrive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotDrive::CopyFrom(const RobotDrive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotDrive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotDrive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotDrive::InternalSwap(RobotDrive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotDrive, angle_)
      + sizeof(RobotDrive::angle_)
      - PROTOBUF_FIELD_OFFSET(RobotDrive, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotDrive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MitionPoint::InitAsDefaultInstance() {
}
class MitionPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<MitionPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_m_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

MitionPoint::MitionPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MitionPoint)
}
MitionPoint::MitionPoint(const MitionPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&m_speed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(m_speed_));
  // @@protoc_insertion_point(copy_constructor:MitionPoint)
}

void MitionPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&m_speed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(m_speed_));
}

MitionPoint::~MitionPoint() {
  // @@protoc_insertion_point(destructor:MitionPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MitionPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MitionPoint::ArenaDtor(void* object) {
  MitionPoint* _this = reinterpret_cast< MitionPoint* >(object);
  (void)_this;
}
void MitionPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MitionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MitionPoint& MitionPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MitionPoint_robot_2eproto.base);
  return *internal_default_instance();
}


void MitionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:MitionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&m_speed_) -
        reinterpret_cast<char*>(&x_)) + sizeof(m_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MitionPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_attribute(&has_bits);
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float m_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_m_speed(&has_bits);
          m_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MitionPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MitionPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required int32 attribute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_attribute(), target);
  }

  // required float m_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_m_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MitionPoint)
  return target;
}

size_t MitionPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MitionPoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_attribute()) {
    // required int32 attribute = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attribute());
  }

  if (_internal_has_m_speed()) {
    // required float m_speed = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MitionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MitionPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required int32 attribute = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attribute());

    // required float m_speed = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MitionPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MitionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MitionPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MitionPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MitionPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MitionPoint)
    MergeFrom(*source);
  }
}

void MitionPoint::MergeFrom(const MitionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MitionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_ = from.attribute_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_speed_ = from.m_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MitionPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MitionPoint::CopyFrom(const MitionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MitionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MitionPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MitionPoint::InternalSwap(MitionPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MitionPoint, m_speed_)
      + sizeof(MitionPoint::m_speed_)
      - PROTOBUF_FIELD_OFFSET(MitionPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MitionPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OriginPoint::InitAsDefaultInstance() {
}
class OriginPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

OriginPoint::OriginPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:OriginPoint)
}
OriginPoint::OriginPoint(const OriginPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:OriginPoint)
}

void OriginPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

OriginPoint::~OriginPoint() {
  // @@protoc_insertion_point(destructor:OriginPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OriginPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OriginPoint::ArenaDtor(void* object) {
  OriginPoint* _this = reinterpret_cast< OriginPoint* >(object);
  (void)_this;
}
void OriginPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OriginPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OriginPoint& OriginPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OriginPoint_robot_2eproto.base);
  return *internal_default_instance();
}


void OriginPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OriginPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginPoint)
  return target;
}

size_t OriginPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:OriginPoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t OriginPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OriginPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OriginPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OriginPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OriginPoint)
    MergeFrom(*source);
  }
}

void OriginPoint::MergeFrom(const OriginPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OriginPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OriginPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginPoint::CopyFrom(const OriginPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OriginPoint::InternalSwap(OriginPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginPoint, z_)
      + sizeof(OriginPoint::z_)
      - PROTOBUF_FIELD_OFFSET(OriginPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotRequest::InitAsDefaultInstance() {
  ::_RobotRequest_default_instance_._instance.get_mutable()->drive_ = const_cast< ::RobotDrive*>(
      ::RobotDrive::internal_default_instance());
  ::_RobotRequest_default_instance_._instance.get_mutable()->origin_ = const_cast< ::OriginPoint*>(
      ::OriginPoint::internal_default_instance());
}
class RobotRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotRequest>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wants(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RobotDrive& drive(const RobotRequest* msg);
  static void set_has_drive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::OriginPoint& origin(const RobotRequest* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_confirm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::RobotDrive&
RobotRequest::_Internal::drive(const RobotRequest* msg) {
  return *msg->drive_;
}
const ::OriginPoint&
RobotRequest::_Internal::origin(const RobotRequest* msg) {
  return *msg->origin_;
}
RobotRequest::RobotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  point_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotRequest)
}
RobotRequest::RobotRequest(const RobotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_token()) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
      GetArena());
  }
  if (from._internal_has_drive()) {
    drive_ = new ::RobotDrive(*from.drive_);
  } else {
    drive_ = nullptr;
  }
  if (from._internal_has_origin()) {
    origin_ = new ::OriginPoint(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&wants_, &from.wants_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirm_) -
    reinterpret_cast<char*>(&wants_)) + sizeof(confirm_));
  // @@protoc_insertion_point(copy_constructor:RobotRequest)
}

void RobotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotRequest_robot_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&drive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirm_) -
      reinterpret_cast<char*>(&drive_)) + sizeof(confirm_));
}

RobotRequest::~RobotRequest() {
  // @@protoc_insertion_point(destructor:RobotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete drive_;
  if (this != internal_default_instance()) delete origin_;
}

void RobotRequest::ArenaDtor(void* object) {
  RobotRequest* _this = reinterpret_cast< RobotRequest* >(object);
  (void)_this;
}
void RobotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotRequest& RobotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotRequest_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(drive_ != nullptr);
      drive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&wants_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confirm_) -
        reinterpret_cast<char*>(&wants_)) + sizeof(confirm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 wants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wants(&has_bits);
          wants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RobotDrive drive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_drive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MitionPoint point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .OriginPoint origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 confirm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_confirm(&has_bits);
          confirm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  // required int32 wants = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_wants(), target);
  }

  // required int32 action = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_action(), target);
  }

  // optional .RobotDrive drive = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::drive(this), target, stream);
  }

  // repeated .MitionPoint point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_point(i), target, stream);
  }

  // optional .OriginPoint origin = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::origin(this), target, stream);
  }

  // optional int32 confirm = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_confirm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotRequest)
  return target;
}

size_t RobotRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotRequest)
  size_t total_size = 0;

  if (_internal_has_token()) {
    // required bytes token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  if (_internal_has_wants()) {
    // required int32 wants = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wants());
  }

  if (_internal_has_action()) {
    // required int32 action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  return total_size;
}
size_t RobotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required bytes token = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());

    // required int32 wants = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wants());

    // required int32 action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MitionPoint point = 5;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .RobotDrive drive = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drive_);
    }

    // optional .OriginPoint origin = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *origin_);
    }

  }
  // optional int32 confirm = 7;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confirm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotRequest)
    MergeFrom(*source);
  }
}

void RobotRequest::MergeFrom(const RobotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_drive()->::RobotDrive::MergeFrom(from._internal_drive());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_origin()->::OriginPoint::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000008u) {
      wants_ = from.wants_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000020u) {
      confirm_ = from.confirm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotRequest::CopyFrom(const RobotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(point_)) return false;
  if (_internal_has_drive()) {
    if (!drive_->IsInitialized()) return false;
  }
  if (_internal_has_origin()) {
    if (!origin_->IsInitialized()) return false;
  }
  return true;
}

void RobotRequest::InternalSwap(RobotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  point_.InternalSwap(&other->point_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotRequest, confirm_)
      + sizeof(RobotRequest::confirm_)
      - PROTOBUF_FIELD_OFFSET(RobotRequest, drive_)>(
          reinterpret_cast<char*>(&drive_),
          reinterpret_cast<char*>(&other->drive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotMap::InitAsDefaultInstance() {
}
class RobotMap::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotMap>()._has_bits_);
  static void set_has_origin_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_grids_x(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_grids_y(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_zgrids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

RobotMap::RobotMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotMap)
}
RobotMap::RobotMap(const RobotMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  zgrids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_zgrids()) {
    zgrids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_zgrids(),
      GetArena());
  }
  ::memcpy(&origin_x_, &from.origin_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&grids_y_) -
    reinterpret_cast<char*>(&origin_x_)) + sizeof(grids_y_));
  // @@protoc_insertion_point(copy_constructor:RobotMap)
}

void RobotMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotMap_robot_2eproto.base);
  zgrids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grids_y_) -
      reinterpret_cast<char*>(&origin_x_)) + sizeof(grids_y_));
}

RobotMap::~RobotMap() {
  // @@protoc_insertion_point(destructor:RobotMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  zgrids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RobotMap::ArenaDtor(void* object) {
  RobotMap* _this = reinterpret_cast< RobotMap* >(object);
  (void)_this;
}
void RobotMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMap& RobotMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMap_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotMap::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    zgrids_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grids_y_) -
        reinterpret_cast<char*>(&origin_x_)) + sizeof(grids_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double origin_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_origin_x(&has_bits);
          origin_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double origin_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_origin_y(&has_bits);
          origin_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 grids_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_grids_x(&has_bits);
          grids_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 grids_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_grids_y(&has_bits);
          grids_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes zgrids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_zgrids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double origin_x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_origin_x(), target);
  }

  // required double origin_y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_origin_y(), target);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  // required int32 grids_x = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_grids_x(), target);
  }

  // required int32 grids_y = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_grids_y(), target);
  }

  // required bytes zgrids = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_zgrids(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotMap)
  return target;
}

size_t RobotMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotMap)
  size_t total_size = 0;

  if (_internal_has_zgrids()) {
    // required bytes zgrids = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zgrids());
  }

  if (_internal_has_origin_x()) {
    // required double origin_x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_origin_y()) {
    // required double origin_y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (_internal_has_grids_x()) {
    // required int32 grids_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grids_x());
  }

  if (_internal_has_grids_y()) {
    // required int32 grids_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grids_y());
  }

  return total_size;
}
size_t RobotMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotMap)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes zgrids = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_zgrids());

    // required double origin_x = 1;
    total_size += 1 + 8;

    // required double origin_y = 2;
    total_size += 1 + 8;

    // required int32 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());

    // required int32 grids_x = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grids_x());

    // required int32 grids_y = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grids_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotMap)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotMap)
    MergeFrom(*source);
  }
}

void RobotMap::MergeFrom(const RobotMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_zgrids(from._internal_zgrids());
    }
    if (cached_has_bits & 0x00000002u) {
      origin_x_ = from.origin_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      grids_x_ = from.grids_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      grids_y_ = from.grids_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMap::CopyFrom(const RobotMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotMap::InternalSwap(RobotMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  zgrids_.Swap(&other->zgrids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotMap, grids_y_)
      + sizeof(RobotMap::grids_y_)
      - PROTOBUF_FIELD_OFFSET(RobotMap, origin_x_)>(
          reinterpret_cast<char*>(&origin_x_),
          reinterpret_cast<char*>(&other->origin_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotPos::InitAsDefaultInstance() {
}
class RobotPos::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotPos>()._has_bits_);
  static void set_has_offset_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RobotPos::RobotPos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotPos)
}
RobotPos::RobotPos(const RobotPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_x_, &from.offset_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&offset_x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:RobotPos)
}

void RobotPos::SharedCtor() {
  ::memset(&offset_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&offset_x_)) + sizeof(angle_));
}

RobotPos::~RobotPos() {
  // @@protoc_insertion_point(destructor:RobotPos)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotPos::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotPos::ArenaDtor(void* object) {
  RobotPos* _this = reinterpret_cast< RobotPos* >(object);
  (void)_this;
}
void RobotPos::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotPos& RobotPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotPos_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotPos::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&offset_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&offset_x_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float offset_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_offset_x(&has_bits);
          offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offset_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_offset_y(&has_bits);
          offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float offset_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_offset_x(), target);
  }

  // required float offset_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_offset_y(), target);
  }

  // optional float angle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotPos)
  return target;
}

size_t RobotPos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotPos)
  size_t total_size = 0;

  if (_internal_has_offset_x()) {
    // required float offset_x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_offset_y()) {
    // required float offset_y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RobotPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotPos)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float offset_x = 1;
    total_size += 1 + 4;

    // required float offset_y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotPos)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotPos)
    MergeFrom(*source);
  }
}

void RobotPos::MergeFrom(const RobotPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      offset_x_ = from.offset_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_y_ = from.offset_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotPos::CopyFrom(const RobotPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotPos::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotPos::InternalSwap(RobotPos* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotPos, angle_)
      + sizeof(RobotPos::angle_)
      - PROTOBUF_FIELD_OFFSET(RobotPos, offset_x_)>(
          reinterpret_cast<char*>(&offset_x_),
          reinterpret_cast<char*>(&other->offset_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotTrail::InitAsDefaultInstance() {
}
class RobotTrail::_Internal {
 public:
};

RobotTrail::RobotTrail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trail_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotTrail)
}
RobotTrail::RobotTrail(const RobotTrail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trail_(from.trail_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RobotTrail)
}

void RobotTrail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotTrail_robot_2eproto.base);
}

RobotTrail::~RobotTrail() {
  // @@protoc_insertion_point(destructor:RobotTrail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotTrail::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotTrail::ArenaDtor(void* object) {
  RobotTrail* _this = reinterpret_cast< RobotTrail* >(object);
  (void)_this;
}
void RobotTrail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotTrail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotTrail& RobotTrail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotTrail_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotTrail::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trail_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotTrail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RobotPos trail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotTrail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotTrail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RobotPos trail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trail(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotTrail)
  return target;
}

size_t RobotTrail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotTrail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RobotPos trail = 1;
  total_size += 1UL * this->_internal_trail_size();
  for (const auto& msg : this->trail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotTrail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotTrail)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotTrail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotTrail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotTrail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotTrail)
    MergeFrom(*source);
  }
}

void RobotTrail::MergeFrom(const RobotTrail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotTrail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trail_.MergeFrom(from.trail_);
}

void RobotTrail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotTrail::CopyFrom(const RobotTrail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotTrail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotTrail::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trail_)) return false;
  return true;
}

void RobotTrail::InternalSwap(RobotTrail* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trail_.InternalSwap(&other->trail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotTrail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotInfo::InitAsDefaultInstance() {
}
class RobotInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotInfo>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cur_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cur_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

RobotInfo::RobotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotInfo)
}
RobotInfo::RobotInfo(const RobotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_yaw_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(cur_yaw_));
  // @@protoc_insertion_point(copy_constructor:RobotInfo)
}

void RobotInfo::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_yaw_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(cur_yaw_));
}

RobotInfo::~RobotInfo() {
  // @@protoc_insertion_point(destructor:RobotInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RobotInfo::ArenaDtor(void* object) {
  RobotInfo* _this = reinterpret_cast< RobotInfo* >(object);
  (void)_this;
}
void RobotInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotInfo& RobotInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotInfo_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cur_yaw_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(cur_yaw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_voltage(&has_bits);
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float cur_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cur_x(&has_bits);
          cur_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float cur_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cur_y(&has_bits);
          cur_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float cur_yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_cur_yaw(&has_bits);
          cur_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_speed(), target);
  }

  // required float voltage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voltage(), target);
  }

  // required float cur_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cur_x(), target);
  }

  // required float cur_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cur_y(), target);
  }

  // required float cur_yaw = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cur_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotInfo)
  return target;
}

size_t RobotInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotInfo)
  size_t total_size = 0;

  if (_internal_has_speed()) {
    // required float speed = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_voltage()) {
    // required float voltage = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_cur_x()) {
    // required float cur_x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_cur_y()) {
    // required float cur_y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_cur_yaw()) {
    // required float cur_yaw = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RobotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float speed = 1;
    total_size += 1 + 4;

    // required float voltage = 2;
    total_size += 1 + 4;

    // required float cur_x = 3;
    total_size += 1 + 4;

    // required float cur_y = 4;
    total_size += 1 + 4;

    // required float cur_yaw = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotInfo)
    MergeFrom(*source);
  }
}

void RobotInfo::MergeFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      voltage_ = from.voltage_;
    }
    if (cached_has_bits & 0x00000004u) {
      cur_x_ = from.cur_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      cur_y_ = from.cur_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      cur_yaw_ = from.cur_yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotInfo::CopyFrom(const RobotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RobotInfo::InternalSwap(RobotInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotInfo, cur_yaw_)
      + sizeof(RobotInfo::cur_yaw_)
      - PROTOBUF_FIELD_OFFSET(RobotInfo, speed_)>(
          reinterpret_cast<char*>(&speed_),
          reinterpret_cast<char*>(&other->speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MitionStatus::InitAsDefaultInstance() {
}
class MitionStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<MitionStatus>()._has_bits_);
  static void set_has_mition_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mition_finish(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MitionStatus::MitionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MitionStatus)
}
MitionStatus::MitionStatus(const MitionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mition_number_, &from.mition_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&mition_finish_) -
    reinterpret_cast<char*>(&mition_number_)) + sizeof(mition_finish_));
  // @@protoc_insertion_point(copy_constructor:MitionStatus)
}

void MitionStatus::SharedCtor() {
  ::memset(&mition_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mition_finish_) -
      reinterpret_cast<char*>(&mition_number_)) + sizeof(mition_finish_));
}

MitionStatus::~MitionStatus() {
  // @@protoc_insertion_point(destructor:MitionStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MitionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MitionStatus::ArenaDtor(void* object) {
  MitionStatus* _this = reinterpret_cast< MitionStatus* >(object);
  (void)_this;
}
void MitionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MitionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MitionStatus& MitionStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MitionStatus_robot_2eproto.base);
  return *internal_default_instance();
}


void MitionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MitionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mition_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mition_finish_) -
        reinterpret_cast<char*>(&mition_number_)) + sizeof(mition_finish_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MitionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 mition_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mition_number(&has_bits);
          mition_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool mition_finish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mition_finish(&has_bits);
          mition_finish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MitionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MitionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 mition_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mition_number(), target);
  }

  // required bool mition_finish = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_mition_finish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MitionStatus)
  return target;
}

size_t MitionStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MitionStatus)
  size_t total_size = 0;

  if (_internal_has_mition_number()) {
    // required int32 mition_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mition_number());
  }

  if (_internal_has_mition_finish()) {
    // required bool mition_finish = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t MitionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MitionStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 mition_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mition_number());

    // required bool mition_finish = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MitionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MitionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MitionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MitionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MitionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MitionStatus)
    MergeFrom(*source);
  }
}

void MitionStatus::MergeFrom(const MitionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MitionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mition_number_ = from.mition_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      mition_finish_ = from.mition_finish_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MitionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MitionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MitionStatus::CopyFrom(const MitionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MitionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MitionStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MitionStatus::InternalSwap(MitionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MitionStatus, mition_finish_)
      + sizeof(MitionStatus::mition_finish_)
      - PROTOBUF_FIELD_OFFSET(MitionStatus, mition_number_)>(
          reinterpret_cast<char*>(&mition_number_),
          reinterpret_cast<char*>(&other->mition_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MitionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotResponse::InitAsDefaultInstance() {
  ::_RobotResponse_default_instance_._instance.get_mutable()->pos_ = const_cast< ::RobotPos*>(
      ::RobotPos::internal_default_instance());
  ::_RobotResponse_default_instance_._instance.get_mutable()->map_ = const_cast< ::RobotMap*>(
      ::RobotMap::internal_default_instance());
  ::_RobotResponse_default_instance_._instance.get_mutable()->trail_ = const_cast< ::RobotTrail*>(
      ::RobotTrail::internal_default_instance());
  ::_RobotResponse_default_instance_._instance.get_mutable()->point_ = const_cast< ::MitionPoint*>(
      ::MitionPoint::internal_default_instance());
  ::_RobotResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::RobotInfo*>(
      ::RobotInfo::internal_default_instance());
  ::_RobotResponse_default_instance_._instance.get_mutable()->mition_ = const_cast< ::MitionStatus*>(
      ::MitionStatus::internal_default_instance());
}
class RobotResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::RobotPos& pos(const RobotResponse* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::RobotMap& map(const RobotResponse* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RobotTrail& trail(const RobotResponse* msg);
  static void set_has_trail(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::MitionPoint& point(const RobotResponse* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::RobotInfo& status(const RobotResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::MitionStatus& mition(const RobotResponse* msg);
  static void set_has_mition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000080) ^ 0x00000080) != 0;
  }
};

const ::RobotPos&
RobotResponse::_Internal::pos(const RobotResponse* msg) {
  return *msg->pos_;
}
const ::RobotMap&
RobotResponse::_Internal::map(const RobotResponse* msg) {
  return *msg->map_;
}
const ::RobotTrail&
RobotResponse::_Internal::trail(const RobotResponse* msg) {
  return *msg->trail_;
}
const ::MitionPoint&
RobotResponse::_Internal::point(const RobotResponse* msg) {
  return *msg->point_;
}
const ::RobotInfo&
RobotResponse::_Internal::status(const RobotResponse* msg) {
  return *msg->status_;
}
const ::MitionStatus&
RobotResponse::_Internal::mition(const RobotResponse* msg) {
  return *msg->mition_;
}
RobotResponse::RobotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RobotResponse)
}
RobotResponse::RobotResponse(const RobotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_info()) {
    info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_info(),
      GetArena());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::RobotPos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::RobotMap(*from.map_);
  } else {
    map_ = nullptr;
  }
  if (from._internal_has_trail()) {
    trail_ = new ::RobotTrail(*from.trail_);
  } else {
    trail_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::MitionPoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::RobotInfo(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_mition()) {
    mition_ = new ::MitionStatus(*from.mition_);
  } else {
    mition_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:RobotResponse)
}

void RobotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotResponse_robot_2eproto.base);
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(code_));
}

RobotResponse::~RobotResponse() {
  // @@protoc_insertion_point(destructor:RobotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete map_;
  if (this != internal_default_instance()) delete trail_;
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete mition_;
}

void RobotResponse::ArenaDtor(void* object) {
  RobotResponse* _this = reinterpret_cast< RobotResponse* >(object);
  (void)_this;
}
void RobotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotResponse& RobotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotResponse_robot_2eproto.base);
  return *internal_default_instance();
}


void RobotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(map_ != nullptr);
      map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trail_ != nullptr);
      trail_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(point_ != nullptr);
      point_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(mition_ != nullptr);
      mition_->Clear();
    }
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RobotResponse.info");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RobotPos pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RobotMap map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RobotTrail trail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MitionPoint point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .RobotInfo status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MitionStatus mition = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // optional string info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_info().data(), static_cast<int>(this->_internal_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RobotResponse.info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_info(), target);
  }

  // optional .RobotPos pos = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  // optional .RobotMap map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::map(this), target, stream);
  }

  // optional .RobotTrail trail = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::trail(this), target, stream);
  }

  // optional .MitionPoint point = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::point(this), target, stream);
  }

  // optional .RobotInfo status = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::status(this), target, stream);
  }

  // optional .MitionStatus mition = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotResponse)
  return target;
}

size_t RobotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotResponse)
  size_t total_size = 0;

  // required int32 code = 1;
  if (_internal_has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_info());
    }

    // optional .RobotPos pos = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .RobotMap map = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_);
    }

    // optional .RobotTrail trail = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trail_);
    }

    // optional .MitionPoint point = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *point_);
    }

    // optional .RobotInfo status = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .MitionStatus mition = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mition_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotResponse)
    MergeFrom(*source);
  }
}

void RobotResponse::MergeFrom(const RobotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_info(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::RobotPos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_map()->::RobotMap::MergeFrom(from._internal_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_trail()->::RobotTrail::MergeFrom(from._internal_trail());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_point()->::MitionPoint::MergeFrom(from._internal_point());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_status()->::RobotInfo::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_mition()->::MitionStatus::MergeFrom(from._internal_mition());
    }
    if (cached_has_bits & 0x00000080u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotResponse::CopyFrom(const RobotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!pos_->IsInitialized()) return false;
  }
  if (_internal_has_map()) {
    if (!map_->IsInitialized()) return false;
  }
  if (_internal_has_trail()) {
    if (!trail_->IsInitialized()) return false;
  }
  if (_internal_has_point()) {
    if (!point_->IsInitialized()) return false;
  }
  if (_internal_has_status()) {
    if (!status_->IsInitialized()) return false;
  }
  if (_internal_has_mition()) {
    if (!mition_->IsInitialized()) return false;
  }
  return true;
}

void RobotResponse::InternalSwap(RobotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotResponse, code_)
      + sizeof(RobotResponse::code_)
      - PROTOBUF_FIELD_OFFSET(RobotResponse, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RobotDrive* Arena::CreateMaybeMessage< ::RobotDrive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotDrive >(arena);
}
template<> PROTOBUF_NOINLINE ::MitionPoint* Arena::CreateMaybeMessage< ::MitionPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MitionPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::OriginPoint* Arena::CreateMaybeMessage< ::OriginPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotRequest* Arena::CreateMaybeMessage< ::RobotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotMap* Arena::CreateMaybeMessage< ::RobotMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotMap >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotPos* Arena::CreateMaybeMessage< ::RobotPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotPos >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotTrail* Arena::CreateMaybeMessage< ::RobotTrail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotTrail >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotInfo* Arena::CreateMaybeMessage< ::RobotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MitionStatus* Arena::CreateMaybeMessage< ::MitionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MitionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotResponse* Arena::CreateMaybeMessage< ::RobotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
